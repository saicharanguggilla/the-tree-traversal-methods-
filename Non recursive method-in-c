#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
#include <stdint.h>
struct TreeNode
{
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value)
{
    struct TreeNode* newNode=(struct TreeNode*)malloc(sizeof(struct TreeNode));
    if(newNode==NULL)
	{
        printf("Memory allocation error\n");
        exit(EXIT_FAILURE);
    }
    newNode->data=value;
    newNode->left=newNode->right=NULL;
    return newNode;
}
void inorderNonRecursive(struct TreeNode* root)
{
    struct TreeNode* stack[100];
    int top=-1;
    struct TreeNode* current=root;
    while (current!=NULL||top!=-1)
	{
        while(current!=NULL)
		{
            stack[++top]=current;
            current=current->left;
        }
        current = stack[top--];
        printf("%d ",current->data);
        current = current->right;
    }
}
void preorderNonRecursive(struct TreeNode* root)
{
    if(root==NULL)
	{
        return;
    }
    struct TreeNode* stack[100];
    int top = -1;
    stack[++top] = root;
    while(top != -1)
	{
        struct TreeNode* current=stack[top--];
        printf("%d ",current->data);
        if (current->right!=NULL)
		{
            stack[++top]=current->right;
        }
        if(current->left!=NULL)
		{
            stack[++top]=current->left;
        }
    }
}
void postorderNonRecursive(struct TreeNode* root)
{
    if(root==NULL)
	{
        return;
    }
    struct TreeNode* stack[100];
    int top1=-1;
    struct TreeNode* stack2[100];
    int top2=-1;
    stack[++top1]=root;
    while(top1 != -1)
	{
        struct TreeNode* current=stack[top1--];
        stack2[++top2]=current;
        if (current->left!=NULL)
		{
            stack[++top1]=current->left;
        }
        if(current->right!=NULL)
		{
            stack[++top1]=current->right;
        }
    }
    while(top2!=-1)
	{
        printf("%d ",stack2[top2--]->data);
    }
}
void freeTree(struct TreeNode* root)
{
    if(root!=NULL)
	{
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}
int main()
{
    struct TreeNode* root=createNode(1);
    root->left=createNode(2);
    root->right=createNode(3);
    root->left->left=createNode(4);
    root->left->right=createNode(5);
    root->right->left=createNode(6);
    root->right->right=createNode(7);
    printf("Non-Recursive Inorder Traversal: ");
    inorderNonRecursive(root);
    printf("\n");
    printf("Non-Recursive Preorder Traversal: ");
    preorderNonRecursive(root);
    printf("\n");
    printf("Non-Recursive Postorder Traversal: ");
    postorderNonRecursive(root);
    printf("\n");
    freeTree(root);
    return 0;
} 

