#include <stdio.h>
#include <stdlib.h>
struct TreeNode
{
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value)
{
    struct TreeNode* newNode=(struct TreeNode*)malloc(sizeof(struct TreeNode));
    if (newNode==NULL)
	{
        printf("Memory allocation error\n");
        exit(EXIT_FAILURE);
    }
    newNode->data=value;
    newNode->left=newNode->right=NULL;
    return newNode;
}
void inorder(struct TreeNode* root)
{
    if (root!=NULL)
	{
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
    }
}
void preorder(struct TreeNode* root)
{
    if (root!=NULL)
	{
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct TreeNode* root)
{
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ",root->data);
    }
}
void freeTree(struct TreeNode* root)
{
    if (root!=NULL)
	{
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}
int main() {
    struct TreeNode* root=createNode(1);
    root->left=createNode(2);
    root->right=createNode(3);
    root->left->left=createNode(4);
    root->left->right=createNode(5);
    root->right->left=createNode(6);
    root->right->right=createNode(7);
    printf("Inorder Traversal: ");
    inorder(root);
    printf("\n");
    printf("Preorder Traversal: ");
    preorder(root);
    printf("\n");
    printf("Postorder Traversal: ");
    postorder(root);
    printf("\n");
    freeTree(root);
    return 0;
} 
